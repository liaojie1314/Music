// Generated by view binder compiler. Do not edit!
package com.example.music.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.music.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RecycleItemSearchHotBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout clItem;

  @NonNull
  public final TextView tvContent;

  @NonNull
  public final TextView tvHot;

  @NonNull
  public final TextView tvNumber;

  @NonNull
  public final TextView tvScore;

  @NonNull
  public final TextView tvText;

  private RecycleItemSearchHotBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout clItem, @NonNull TextView tvContent, @NonNull TextView tvHot,
      @NonNull TextView tvNumber, @NonNull TextView tvScore, @NonNull TextView tvText) {
    this.rootView = rootView;
    this.clItem = clItem;
    this.tvContent = tvContent;
    this.tvHot = tvHot;
    this.tvNumber = tvNumber;
    this.tvScore = tvScore;
    this.tvText = tvText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RecycleItemSearchHotBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RecycleItemSearchHotBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.recycle_item_search_hot, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RecycleItemSearchHotBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout clItem = (ConstraintLayout) rootView;

      id = R.id.tvContent;
      TextView tvContent = rootView.findViewById(id);
      if (tvContent == null) {
        break missingId;
      }

      id = R.id.tvHot;
      TextView tvHot = rootView.findViewById(id);
      if (tvHot == null) {
        break missingId;
      }

      id = R.id.tvNumber;
      TextView tvNumber = rootView.findViewById(id);
      if (tvNumber == null) {
        break missingId;
      }

      id = R.id.tvScore;
      TextView tvScore = rootView.findViewById(id);
      if (tvScore == null) {
        break missingId;
      }

      id = R.id.tvText;
      TextView tvText = rootView.findViewById(id);
      if (tvText == null) {
        break missingId;
      }

      return new RecycleItemSearchHotBinding((ConstraintLayout) rootView, clItem, tvContent, tvHot,
          tvNumber, tvScore, tvText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
